apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def keystorePropertiesFile = rootProject.file("../jks/all/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

  signingConfigs {
    release {
      keyAlias keystoreProperties['keyAlias']
      keyPassword keystoreProperties['keyPassword']
      storeFile file(keystoreProperties['storeFile'])
      storePassword keystoreProperties['storePassword']
    }
  }

  compileSdkVersion config.compile_sdk
  defaultConfig {
    applicationId config.app_id
    minSdkVersion config.min_sdk
    targetSdkVersion config.target_sdk
    versionCode config.version_major * 1000000 + config.version_minor * 1000 + config.version_patch
    versionName "${config.version_major}.${config.version_minor}.${config.version_patch}"
    vectorDrawables.useSupportLibrary true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    release {

      minifyEnabled true
      useProguard true
      shrinkResources true

      proguardFile getDefaultProguardFile('proguard-android.txt')
      proguardFile 'proguard-rules.pro'
      proguardFile 'proguard-firebase.pro'

      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      android.applicationVariants.all { variant ->
        variant.outputs.all {
          def formattedDate = new Date().format('yyyyMMddHHmmss')
          def appName = variant.getApplicationId().split(/[.]/)[3]
          outputFileName =
              "${appName}-${variant.name}-${variant.versionCode}-${variant.versionName}-${formattedDate}.apk"
        }
      }
    }
    debug {
      minifyEnabled false
    }
  }
  dataBinding {
    enabled = true
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  androidExtensions {
    experimental = true
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation deps.kotlin
  implementation deps.androidx.appcompat
  implementation deps.androidx.material
  implementation deps.androidx.constraintlayout
  implementation deps.androidx.core_ktx
  implementation deps.androidx.viewpager2
  implementation deps.androidx.paging_runtime
  implementation deps.androidx.paging_rxjava2
  implementation deps.androidx.lifecycle_extensions
  implementation deps.androidx.lifecycle_viewmodel_ktx
  implementation deps.androidx.annotation
  implementation deps.androidx.legacy_preference_v14
  implementation deps.firebase.ads

  implementation deps.rx.rxjava2
  implementation deps.rx.rxandroid
  implementation deps.rx.rxkotlin2

  implementation deps.easydeviceinfo
  implementation deps.licensedialog
  implementation deps.timber
  implementation deps.easyprefs


  testImplementation deps.atsl.junit
  androidTestImplementation deps.atsl.runner
  androidTestImplementation deps.atsl.espressocore
}

apply plugin: 'com.google.gms.google-services'

/*
      tasks.whenTaskAdded { task ->
        if (task.name.startsWith("bundle")) {
          def renameTaskName = "rename${task.name.capitalize()}Aab"
          def flavor = task.name.substring("bundle".length()).uncapitalize()
          tasks.create(renameTaskName, Copy) {
            def path = "${buildDir}/outputs/bundle/${flavor}/"
            from(path)
            include "app.aab"
            destinationDir file("${buildDir}/outputs/renamedBundle/")
            rename "app.aab", "${flavor}.aab"
          }

          task.finalizedBy(renameTaskName)
        }
      }

 */